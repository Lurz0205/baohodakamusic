// commands/play.js
const { SlashCommandBuilder, InteractionResponseTypes } = require('discord.js'); // Th√™m InteractionResponseTypes
const { QueryType } = require('discord-player');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('play')
        .setDescription('Ph√°t nh·∫°c t·ª´ YouTube ho·∫∑c Spotify. H·ªó tr·ª£ link SoundCloud.')
        .addStringOption(option =>
            option.setName('query')
                .setDescription('T√™n b√†i h√°t ho·∫∑c li√™n k·∫øt (YouTube, Spotify, SoundCloud)')
                .setRequired(true)),
    async execute(interaction, player) {
        const query = interaction.options.getString('query');
        const channel = interaction.member.voice.channel;

        if (!channel) {
            // Ph·∫£n h·ªìi ngay l·∫≠p t·ª©c n·∫øu kh√¥ng ·ªü k√™nh tho·∫°i
            return interaction.reply({ content: 'B·∫°n ph·∫£i ·ªü trong m·ªôt k√™nh tho·∫°i ƒë·ªÉ ph√°t nh·∫°c!', ephemeral: true });
        }

        // Defer ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh l·ªói Unknown interaction do th·ªùi gian x·ª≠ l√Ω
        // S·ª≠ d·ª•ng interaction.deferReply() ƒë·ªÉ g·ª≠i m·ªôt ph·∫£n h·ªìi t·∫°m th·ªùi.
        // Sau ƒë√≥, ch√∫ng ta s·∫Ω d√πng interaction.editReply() ƒë·ªÉ c·∫≠p nh·∫≠t tin nh·∫Øn.
        // B·∫Øt l·ªói khi deferReply() th·∫•t b·∫°i (v√≠ d·ª•: t∆∞∆°ng t√°c ƒë√£ qu√° h·∫°n)
        try {
            await interaction.deferReply();
        } catch (deferError) {
            console.error('L·ªói khi deferReply:', deferError);
            // N·∫øu deferReply th·∫•t b·∫°i (th∆∞·ªùng l√† do Unknown interaction),
            // ch√∫ng ta kh√¥ng th·ªÉ l√†m g√¨ th√™m v·ªõi t∆∞∆°ng t√°c n√†y.
            // C√≥ th·ªÉ log l·ªói v√† tho√°t.
            return; // Tho√°t kh·ªèi h√†m ƒë·ªÉ tr√°nh l·ªói ti·∫øp theo
        }

        try {
            let searchResult;
            const isUrl = query.startsWith('http://') || query.startsWith('https://');

            if (isUrl) {
                searchResult = await player.search(query, {
                    requestedBy: interaction.user,
                    searchEngine: QueryType.Auto
                });
            } else {
                searchResult = await player.search(query, {
                    requestedBy: interaction.user,
                    searchEngine: QueryType.YouTubeSearch
                });

                if (!searchResult || searchResult.isEmpty()) {
                    searchResult = await player.search(query, {
                        requestedBy: interaction.user,
                        searchEngine: QueryType.SpotifySearch
                    });
                }
            }

            if (!searchResult || searchResult.isEmpty()) {
                return interaction.editReply({ content: 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p tr√™n YouTube ho·∫∑c Spotify. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c m·ªôt li√™n k·∫øt tr·ª±c ti·∫øp.' });
            }

            const trackToPlay = searchResult.tracks[0];

            if (!isUrl && trackToPlay.source === 'soundcloud') {
                return interaction.editReply({ content: 'T√¨m th·∫•y b√†i h√°t t·ª´ SoundCloud, nh∆∞ng bot ch·ªâ ph√°t SoundCloud qua li√™n k·∫øt tr·ª±c ti·∫øp khi t√¨m ki·∫øm b·∫±ng t√™n. Vui l√≤ng cung c·∫•p li√™n k·∫øt SoundCloud n·∫øu b·∫°n mu·ªën ph√°t b√†i n√†y.' });
            }

            const { track } = await player.play(channel, trackToPlay, {
                requestedBy: interaction.user,
                metadata: { channel: interaction.channel }
            });

            if (track) {
                return interaction.editReply({
                    embeds: [{
                        title: `üé∂ ƒê√£ th√™m v√†o h√†ng ch·ªù: ${track.title}`,
                        description: `Th·ªùi l∆∞·ª£ng: ${track.duration}\nNgu·ªìn: ${track.source}`,
                        url: track.url,
                        thumbnail: { url: track.thumbnail },
                        color: interaction.client.config.EMBED_COLOR,
                        footer: {
                            text: `Y√™u c·∫ßu b·ªüi: ${track.requestedBy.tag}`,
                            icon_url: track.requestedBy.displayAvatarURL({ dynamic: true })
                        }
                    }]
                });
            } else {
                return interaction.editReply({ content: 'ƒê√£ x·∫£y ra l·ªói khi th√™m b√†i h√°t v√†o h√†ng ch·ªù.' });
            }
        } catch (e) {
            console.error(e);
            // S·ª≠ d·ª•ng editReply thay v√¨ followUp/reply sau khi ƒë√£ defer
            await interaction.editReply({ content: `ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c: ${e.message}`, ephemeral: true });
        }
    },
};
