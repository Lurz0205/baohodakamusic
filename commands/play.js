// commands/play.js
const { SlashCommandBuilder } = require('discord.js');
const { QueryType } = require('discord-player');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('play')
        .setDescription('Ph√°t nh·∫°c t·ª´ YouTube ho·∫∑c Spotify.')
        .addStringOption(option =>
            option.setName('query')
                .setDescription('T√™n b√†i h√°t ho·∫∑c li√™n k·∫øt (YouTube, Spotify)')
                .setRequired(true)),
    async execute(interaction, player) {
        const query = interaction.options.getString('query');
        const channel = interaction.member.voice.channel;

        if (!channel) {
            return interaction.reply({ content: 'B·∫°n ph·∫£i ·ªü trong m·ªôt k√™nh tho·∫°i ƒë·ªÉ ph√°t nh·∫°c!', ephemeral: true });
        }

        try {
            await interaction.deferReply();
        } catch (deferError) {
            console.error('L·ªói khi deferReply:', deferError);
            return;
        }

        try {
            // ƒê√É S·ª¨A: C√°ch t·∫°o queue trong discord-player v6.x
            const queue = player.createQueue(interaction.guild, {
                metadata: {
                    channel: interaction.channel
                },
                leaveOnEnd: true,
                leaveOnStop: true,
                leaveOnEmpty: true,
            });

            // K·∫øt n·ªëi v√†o k√™nh tho·∫°i
            try {
                if (!queue.connection) {
                    await queue.connect(channel);
                }
            } catch (error) {
                queue.destroy();
                console.error('L·ªói khi k·∫øt n·ªëi k√™nh tho·∫°i:', error);
                return interaction.editReply({ content: 'Kh√¥ng th·ªÉ tham gia k√™nh tho·∫°i c·ªßa b·∫°n!', ephemeral: true });
            }

            // T√¨m ki·∫øm b√†i h√°t
            const searchResult = await player.search(query, {
                requestedBy: interaction.user,
                // Trong v6.x, QueryType.AUTO ho·∫∑c QueryType.YOUTUBE_SEARCH
                searchEngine: QueryType.AUTO // S·ª≠ d·ª•ng AUTO ƒë·ªÉ t·ª± ƒë·ªông nh·∫≠n di·ªán ngu·ªìn t·ª´ link
            });

            if (!searchResult || !searchResult.tracks.length) {
                return interaction.editReply({ content: 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c m·ªôt li√™n k·∫øt tr·ª±c ti·∫øp.' });
            }

            // Th√™m b√†i h√°t v√†o h√†ng ch·ªù
            await queue.addTrack(searchResult.tracks[0]);

            if (!queue.playing) {
                await queue.play();
            }

            return interaction.editReply({
                embeds: [{
                    title: `üé∂ ƒê√£ th√™m v√†o h√†ng ch·ªù: ${searchResult.tracks[0].title}`,
                    description: `Th·ªùi l∆∞·ª£ng: ${searchResult.tracks[0].duration}\nNgu·ªìn: ${searchResult.tracks[0].source}`,
                    url: searchResult.tracks[0].url,
                    thumbnail: { url: searchResult.tracks[0].thumbnail },
                    color: interaction.client.config.EMBED_COLOR,
                    footer: {
                        text: `Y√™u c·∫ßu b·ªüi: ${searchResult.tracks[0].requestedBy.tag}`,
                        icon_url: searchResult.tracks[0].requestedBy.displayAvatarURL({ dynamic: true })
                    }
                }]
            });

        } catch (e) {
            console.error(e);
            await interaction.editReply({ content: `ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c: ${e.message}`, ephemeral: true });
        }
    },
};
