// commands/play.js
const { SlashCommandBuilder } = require('discord.js');
const { QueryType } = require('discord-player');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('play')
        .setDescription('Ph√°t nh·∫°c t·ª´ YouTube ho·∫∑c Spotify. H·ªó tr·ª£ link SoundCloud.')
        .addStringOption(option =>
            option.setName('query')
                .setDescription('T√™n b√†i h√°t ho·∫∑c li√™n k·∫øt (YouTube, Spotify, SoundCloud)')
                .setRequired(true)),
    async execute(interaction, player) {
        const query = interaction.options.getString('query');
        const channel = interaction.member.voice.channel;

        if (!channel) {
            return interaction.reply({ content: 'B·∫°n ph·∫£i ·ªü trong m·ªôt k√™nh tho·∫°i ƒë·ªÉ ph√°t nh·∫°c!', ephemeral: true });
        }

        // Defer ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh l·ªói Unknown interaction
        await interaction.deferReply();

        try {
            let searchResult;
            // Ki·ªÉm tra xem truy v·∫•n c√≥ ph·∫£i l√† URL h·ª£p l·ªá m√† discord-player c√≥ th·ªÉ x·ª≠ l√Ω kh√¥ng
            // QueryType.Auto s·∫Ω t·ª± ƒë·ªông nh·∫≠n di·ªán c√°c URL t·ª´ YouTube, Spotify, SoundCloud, v.v.
            // N·∫øu kh√¥ng ph·∫£i URL, ch√∫ng ta s·∫Ω √©p bu·ªôc t√¨m ki·∫øm tr√™n YouTube.
            if (query.startsWith('http://') || query.startsWith('https://')) {
                searchResult = await player.search(query, {
                    requestedBy: interaction.user,
                    searchEngine: QueryType.Auto // ƒê·ªÉ x·ª≠ l√Ω c√°c link
                });
            } else {
                // N·∫øu kh√¥ng ph·∫£i URL, ∆∞u ti√™n t√¨m ki·∫øm tr√™n YouTube
                searchResult = await player.search(query, {
                    requestedBy: interaction.user,
                    searchEngine: QueryType.YouTubeSearch // √âp bu·ªôc t√¨m ki·∫øm YouTube
                });

                // N·∫øu YouTube kh√¥ng t√¨m th·∫•y ho·∫∑c k·∫øt qu·∫£ kh√¥ng ph√π h·ª£p, th·ª≠ Spotify
                if (!searchResult || searchResult.isEmpty()) {
                    searchResult = await player.search(query, {
                        requestedBy: interaction.user,
                        searchEngine: QueryType.SpotifySearch // Th·ª≠ Spotify n·∫øu YouTube kh√¥ng c√≥
                    });
                }
            }


            if (!searchResult || searchResult.isEmpty()) {
                return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p tr√™n YouTube ho·∫∑c Spotify. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c m·ªôt li√™n k·∫øt tr·ª±c ti·∫øp.' });
            }

            const { track } = await player.play(channel, searchResult.tracks[0], {
                requestedBy: interaction.user,
                metadata: { channel: interaction.channel } // ƒê·∫£m b·∫£o k√™nh ƒë∆∞·ª£c truy·ªÅn
            });

            if (track) {
                return interaction.followUp({
                    embeds: [{
                        title: `üé∂ ƒê√£ th√™m v√†o h√†ng ch·ªù: ${track.title}`,
                        description: `Th·ªùi l∆∞·ª£ng: ${track.duration}\nNgu·ªìn: ${track.source}`,
                        url: track.url,
                        thumbnail: { url: track.thumbnail },
                        color: interaction.client.config.EMBED_COLOR,
                        footer: {
                            text: `Y√™u c·∫ßu b·ªüi: ${track.requestedBy.tag}`,
                            icon_url: track.requestedBy.displayAvatarURL({ dynamic: true })
                        }
                    }]
                });
            } else {
                return interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói khi th√™m b√†i h√°t v√†o h√†ng ch·ªù.' });
            }
        } catch (e) {
            console.error(e);
            // ƒê·∫£m b·∫£o ch·ªâ g·ª≠i followUp n·∫øu ch∆∞a ƒë∆∞·ª£c ph·∫£n h·ªìi
            if (interaction.deferred || interaction.replied) {
                await interaction.followUp({ content: `ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c: ${e.message}`, ephemeral: true });
            } else {
                await interaction.reply({ content: `ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c: ${e.message}`, ephemeral: true });
            }
        }
    },
};
