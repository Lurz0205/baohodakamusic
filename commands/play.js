// commands/play.js
const { SlashCommandBuilder } = require('discord.js');
const { joinVoiceChannel, entersState, VoiceConnectionStatus } = require('@discordjs/voice'); // C·∫ßn cho k·∫øt n·ªëi tho·∫°i

module.exports = {
    data: new SlashCommandBuilder()
        .setName('play')
        .setDescription('Ph√°t nh·∫°c t·ª´ YouTube ho·∫∑c Spotify.')
        .addStringOption(option =>
            option.setName('query')
                .setDescription('T√™n b√†i h√°t ho·∫∑c li√™n k·∫øt (YouTube, Spotify)')
                .setRequired(true)),
    async execute(interaction, lavalink, client) { // Nh·∫≠n lavalink instance
        const query = interaction.options.getString('query');
        const channel = interaction.member.voice.channel;

        if (!channel) {
            return interaction.reply({ content: 'B·∫°n ph·∫£i ·ªü trong m·ªôt k√™nh tho·∫°i ƒë·ªÉ ph√°t nh·∫°c!', ephemeral: true });
        }

        if (!channel.joinable) {
            return interaction.reply({ content: 'T√¥i kh√¥ng c√≥ quy·ªÅn tham gia k√™nh tho·∫°i n√†y!', ephemeral: true });
        }

        if (!channel.speakable) {
            return interaction.reply({ content: 'T√¥i kh√¥ng c√≥ quy·ªÅn n√≥i trong k√™nh tho·∫°i n√†y!', ephemeral: true });
        }

        // Ki·ªÉm tra xem c√≥ Lavalink node n√†o ƒëang k·∫øt n·ªëi kh√¥ng
        const connectedNode = lavalink.nodes.find(node => node.connected);
        if (!connectedNode) {
            return interaction.reply({ content: 'Bot kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Lavalink node n√†o. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.', ephemeral: true });
        }

        try {
            await interaction.deferReply();
        } catch (deferError) {
            console.error('L·ªói khi deferReply:', deferError);
            return;
        }

        try {
            // T√¨m ki·∫øm b√†i h√°t
            const searchResult = await connectedNode.rest.loadTracks(query);

            if (!searchResult || searchResult.loadType === 'NO_MATCHES' || searchResult.loadType === 'LOAD_FAILED') {
                return interaction.editReply({ content: 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c m·ªôt li√™n k·∫øt tr·ª±c ti·∫øp.' });
            }

            let track;
            if (searchResult.loadType === 'PLAYLIST_LOADED') {
                track = searchResult.tracks[0]; // L·∫•y b√†i ƒë·∫ßu ti√™n c·ªßa playlist
                // B·∫°n c√≥ th·ªÉ th√™m logic ƒë·ªÉ th√™m to√†n b·ªô playlist v√†o h√†ng ch·ªù n·∫øu mu·ªën
            } else {
                track = searchResult.tracks[0];
            }

            // Ki·ªÉm tra ngu·ªìn c·ªßa track ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng ph·∫£i SoundCloud
            // Lavalink-client t·ª± ƒë·ªông x·ª≠ l√Ω ngu·ªìn, nh∆∞ng n·∫øu b·∫°n mu·ªën c·∫•m c·ª• th·ªÉ, b·∫°n c√≥ th·ªÉ ki·ªÉm tra ·ªü ƒë√¢y.
            // V√≠ d·ª•: if (track.info.uri.includes('soundcloud.com')) { ... }

            let player = lavalink.players.get(interaction.guild.id);

            // N·∫øu ch∆∞a c√≥ player cho guild n√†y, t·∫°o m·ªõi
            if (!player) {
                const connection = joinVoiceChannel({
                    channelId: channel.id,
                    guildId: channel.guild.id,
                    adapterCreator: channel.guild.voiceAdapterCreator,
                });

                // Ch·ªù k·∫øt n·ªëi tho·∫°i s·∫µn s√†ng
                await entersState(connection, VoiceConnectionStatus.Ready, 30_000);

                player = lavalink.createPlayer({
                    guildId: interaction.guild.id,
                    voiceChannelId: channel.id,
                    textChannelId: interaction.channel.id, // L∆∞u text channel ID ƒë·ªÉ g·ª≠i th√¥ng b√°o
                    connection: connection,
                    node: connectedNode, // G√°n node ƒë√£ k·∫øt n·ªëi
                });
            }

            // Th√™m b√†i h√°t v√†o h√†ng ch·ªù v√† ph√°t
            await player.queue.add(track);
            if (!player.playing && !player.paused) {
                await player.queue.start();
            }

            return interaction.editReply({
                embeds: [{
                    title: `üé∂ ƒê√£ th√™m v√†o h√†ng ch·ªù: ${track.info.title}`,
                    description: `Th·ªùi l∆∞·ª£ng: ${formatDuration(track.info.length)}\nNgu·ªìn: ${track.info.uri.includes('youtube.com') ? 'YouTube' : track.info.uri.includes('spotify.com') ? 'Spotify' : 'Kh√°c'}`,
                    url: track.info.uri,
                    thumbnail: { url: track.info.thumbnail || 'https://placehold.co/128x128/000000/FFFFFF?text=No+Image' },
                    color: client.config.EMBED_COLOR,
                    footer: {
                        text: `Y√™u c·∫ßu b·ªüi: ${interaction.user.tag}`,
                        icon_url: interaction.user.displayAvatarURL({ dynamic: true })
                    }
                }]
            });

        } catch (e) {
            console.error(e);
            await interaction.editReply({ content: `ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c: ${e.message}`, ephemeral: true });
        }
    },
};

// H√†m h·ªó tr·ª£ ƒë·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng
function formatDuration(ms) {
    const minutes = Math.floor(ms / 60000);
    const seconds = ((ms % 60000) / 1000).toFixed(0);
    return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
}
